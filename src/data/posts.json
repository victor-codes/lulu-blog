[
  {
    "id": 1635798509,
    "title": "Global and Local Scopes of Python Variables",
    "time1": "2021-Nov-01T+0100 (West Africa Standard :undefined:00",
    "author": "Lulu Nwenyi",
    "publishDate": "Nov 01, 2021",
    "time": "+0100 (West Africa Standard :undefined",
    "thumbnail": "https://lulunwenyi.super.site/_next/image?url=https%3A%2F%2Fsuper-static-assets.s3.amazonaws.com%2F1fbba07a-705f-4e88-9440-65f7cb599915%2Fimages%2F063df8db-079a-45f8-a291-4db863d73d96.png&w=1920&q=80",
    "category": "Dev",
    "content": "\nAs you may or may not know; In python, a variable is created the moment you assign a value to it using the “=“ sign. Due to their scopes, Variables are classified into two main groups. \n\n### What is a scope?\n\nThe scope of a variable refers to the area where you can the variable from. In other words, it is the container holding a variable. \n\n### Types of Variables\n\nAs earlier mentioned, there are two types of variables; \n\n- Global Variable\n- Local Variable\n\n### Global Variables\n\nA Global Variable exists in a Global Scope. It can be reached and modified anywhere in a program, and all functions of a program exist in the Global Scope. Therefore, once you start writing a program or lines of code, every variable declared outside of a function is referred to as a Global Variable.\n\n```python\nusername = \"Lulu\"\ndef myFunction():\n    print (\"What can I call you?\") \n    name = input()\n    print (\"Hi, \" + name + \"!\")\n\nmyFunction()\nprint (\"Your username is \" + username)\n```\n\nIn this program above, the Global variable is “username” because it is outside the function. \n\n### Local Variables\n\nA Local Variable is nested in a function, and each function has its own Local Scope. A Local Scope is created once a function is called. The variables nested in this function are considered temporary because they don’t exist after the function returns a statement. \n\n```python\nusername = \"Lulu\" #global variable\ndef myFunction():\n    print (\"What can I call you?\") \n    name = input() #local variable\n    print (username)\n\nmyFunction()\nprint (\"Your username is \" + username)\n```\n\nHere, we’re calling the global variable (username) in the local scope with the print function. This program would run smoothly because the local scope can access global variables.\n\n## Differences between Global and Local Variables\n\n1. A global variable is declared outside a function while a local variable is declared inside the function. \n2. When the value of a global variable is modified in a function, the effect of change is visible all through the program unlike a local variable whereas change only has effect in the function it was declared in. \n3. The value of a local variable cannot be shared because it is only accessible in one function. However, the value of a global variable is accessible by multiple functions across the program. \n4. Local variables are created when a function starts and are lost when a function is terminated, while a Global Variable is created at the beginning of a program and ends when the program is terminated. \n\n## Advantages and Disadvantages of Using Global Variables\n\n### Advantages\n\n- You can access Global Variables from all functions or modules in a program.\n- No repetition is needed as you only need to declare a global variable once; outside the modules.\n- It is mainly used for storing constants to allow consistency and reuse.\n- A global variable allows multiple functions access the same data.\n\n### Disadvantages\n\n- Data can be easily altered by any function and any newly written statement in the program can change the value of the global variable.\n- If a global variable is subjected to change, you will need to change all modules where they are called.\n\n## Advantages and disadvantages of using Local Variables\n\n### Advantages\n\n- Local variables can have the same names in different functions because they are only recognized in the one they are declared in.\n- Using local variables ensures you that the values of variables will remain intact while the program is running.\n- In cases of bugs, refactoring codes is easier when local variables are used.\n\n### Disadvantages\n\n- Local variables are not reusable by other functions.\n\nEvery variable is either local or global and cannot be both. This shows that local and global variables are equally important in every program. However, declaring unwanted global variables should be avoided and to enhance the readability of your code, make use of local variables more.",
    "slug": "global-and-local-scopes-of-python-variables",
    "tags": "Python, Docker",
    "description": "As you may or may not know; In python, a variable is created the moment you assign a value to it using the “=“ sign. Due to their scopes, Variables are classified into two main groups."
  },
  {
    "id": 1633619739,
    "title": "How to build a Twitter bot that tweets every hour with Python and Tweepy",
    "time1": "undefined-undefined-undefinedThu Oct 07 2021 16:15:00",
    "author": "Lulu Nwenyi",
    "publishDate": "undefined undefined, undefined",
    "time": "hu Oct 07 2021 16:15",
    "thumbnail": "public/image/twitter-bot.png",
    "category": "Dev",
    "content": "# How to build a Twitter bot that tweets every hour with Python and Tweepy\n\nCategory: Tech\nStatus: ✅ Completed\n\nBuilding a Twitter bot is a simple and very interesting project to take on as a developer. While there’s a wide range of functionalities you can choose from, in this article, I’ll highlight how to build a Twitter bot that makes a tweet, every five minutes. \n\n### Prerequisites:\n\n* Python 3.6+\n* Tweepy\n* Twitter API\n* Heroku\n\n### Getting Twitter API Access\n\nIn my opinion, it’s best you create a twitter account and apply for access before you start project. This would help you test your program efficiently and if your application isn’t approved as soon as it should be, you can sort it out before you’re finished with your project. \n\nTo get your application approved by twitter, you have to ensure your app use case doesn’t violate the policies, and it takes only a few minutes or an hour at most. To apply for access, visit [developer.twitter.com](http://developer.twitter.com).\n\n### Setting up the Directory\n\nGoing over what we would be working on; we’re building an app that sends tweets on its own. For this project, we would be making use of the [iAffirm API](https://github.com/lulunwenyi/iaffirm). This app would make requests to the API to get affirmation messages, pick a random message, create a tweet with the message and then, send the tweet. \n\nFor simplicity, we would structure our app like this: \n\n![iAffirmbot_directory.png](/image/iaffirmbot_directory.png \"iAffirmbot_directory\")\n\nOnce this is done, we can setup the environment we would be working in. To create and activate the virtual environment, run the following commands:\n\n```bash\n###### FOR MAC AND LINUX USERS #########\n########################################\n\n##### TO CREATE VIRTUAL ENVIRONMENT ####\n$ python3 -m venv env \n\n##### TO ACTIVATE THE VIRUTAL ENV #######\n$ source env/bin/activate\n\n######## FOR WINDOWS USERS #############\n########################################\n\n##### TO CREATE VIRTUAL ENVIRONMENT ####\n$ py -m venv env\n\n##### TO ACTIVATE THE VIRUTAL ENV #######\n$ .\\env\\Scripts\\activate\n```\n\n### Installing the dependencies\n\nThere are different libraries available for using the twitter api. However, our app is dependent on the Tweepy library. To install Tweepy,\n\n```bash\n$ pip install tweepy\n```\n\nAfter successful installation, we can now add our dependencies to the `requirements.txt` file which is required during deployment. To do this, you can run;\n\n```bash\n$ pip freeze > requirements.txt\n```\n\n### Setting the Environment Variables\n\nTo test our application, we would need to add some environment variables to our `.env` file. These environment variables are tokens/key that we can get from our twitter developer portal. Though, we would have to create a `.gitignore` file to prevent committing the API Keys to the repository. \n\nTo get your API Keys, login to your developer portal and create an app. \n\nAfter creating an app, navigate to your dashboard, then click “Keys and Tokens”. Regenerate and copy your tokens to the `.env` file. Once you retrieve your tokens, the `.env` file should look like this:\n\n```bash\n# FOR MAC/LINUX USERS\nexport API_KEY=your.api.key.goes.here\nexport API_SECRET_KEY=api.secret.key.goes.here\nexport ACCESS_TOKEN=access.token.goes.here\nexport ACCESS_TOKEN_SECRET=access.token.secret.goes.here\n\n# FOR WINDOWS\nset API_KEY=your.api.key.goes.here\nset API_SECRET_KEY=api.secret.key.goes.here\nset ACCESS_TOKEN=access.token.goes.here\nset ACCESS_TOKEN_SECRET=access.token.secret.goes.here\n```\n\n### Configuring our app\n\nWith everything set up, it would be good to try out a test tweet. Let’s try tweeting hello world from our app. In our `main.py` : \n\n```python\n# IMPORT THE LIBRARIES\nimport tweepy\nimport os\n\n# SET UP APP CONFIG\nconsumer_key = os.environ.get('API_KEY')\nconsumer_secret_key = os.environ.get('API_SECRET_KEY')\naccess_token = os.environ.get('ACCESS_TOKEN')\naccess_token_secret = os.environ.get('ACCESS_TOKEN_SECRET')\n\n# TO AUTHORIZE THE APP\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\n# CREATE API OBJECT\napi = tweepy.API(auth)\n\n# CREATE TWEET\napi.update_status(\"Hello World!\")\n```\n\nTo run the code above, we can set our environment variables in the terminal and start the server by running the command:\n\n```bash\n$ python main.py\n```\n\nIf all went well, we should have a new “Hello World!” tweet on our account. \n\n### Building our bot functions\n\nWe’ve tried out a test tweet, now let’s get to it. \n\nThe first step we’re taking is requesting the affirmation messages in json format from the iAffirm API with the requests library: \n\n```python\n# IMPORT THE LIBRARIES\nimport tweepy\nimport requests\nimport json\nimport os\n\n# SET UP APP CONFIG\nconsumer_key = os.environ.get('API_KEY')\nconsumer_secret_key = os.environ.get('API_SECRET_KEY')\naccess_token = os.environ.get('ACCESS_TOKEN')\naccess_token_secret = os.environ.get('ACCESS_TOKEN_SECRET')\n\n# REQUEST MESSAGES FROM THE API \ndef get_affirmations():\n    response = requests.get('https://iaffirm.herokuapp.com/affirmations').text\n    affirmation = json.loads(response)\n    return(affirmation[\"affirmations\"])\n```\n\nThe next thing we need to define, is the function to pick a message at random from the list that is returned by the `get_affirmations` function. Import the `random` module to your code and create the function:\n\n```python\n# PICK A RANDOM MESSAGE\ndef get_random_affirmation():\n    affirmations = get_affirmations()\n    random_affirmation = random.randint(0, len(affirmations) -1)\n    return (affirmations[random_affirmation]['text'])\n```\n\nNow that we have our functions to get random messages, we can define function to create and send the tweet. \n\n```python\n# CREATE THE TWEET\ndef create_tweet():\n    affirmation = get_random_affirmation()\n    tweet = (affirmation)\n    return tweet\n\n# SEND THE TWEET\ndef tweet_message():\n\n    # AUTHORIZE\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret_key)\n    auth.set_access_token(access_token, access_token_secret)\n    api = tweepy.API(auth)\n\n    # SEND\n    tweet = create_tweet()\n    api.update_status(tweet + \" #iAffirm\")\n\n# TO RUN THE APP\nif __name__ == \"__main__\":\n     tweet_message()\n```\n\nWith all that code-writing in place, let’s test it! Set your environment variables in the terminal, and run the command:\n\n```bash\n$ python main.py\n```\n\nWhen we check our twitter account, we should have a tweet with your app’s name, like this:\n\n![D522B0C8-1644-411A-80CF-88ABF6E60751.jpeg](/image/d522b0c8-1644-411a-80cf-88abf6e60751.jpeg \"iAffirmBot twitter image\")\n\nThough our bot works, we want to set intervals for it. I mean that the aim is to get the bot to tweet every 10 minutes. \n\nTo do this, import the `time` module and make the following additions to our `tweet_message` function:\n\n```python\n# SEND THE TWEET\ndef tweet_message():\n\n    # AUTHORIZE\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret_key)\n    auth.set_access_token(access_token, access_token_secret)\n    api = tweepy.API(auth)\n\n    # SET INTERVAL IN SECONDS\n    interval = 60 * 10\n    while True: \n\n       # SEND TWEET\n        try: \n          tweet = create_tweet()\n          api.update_status(tweet + \" #iAffirm\")\n          time.sleep(interval)\n\n        # ERROR HANDLER\n        except tweepy.TweepError as e:\n          print(e.reason)\n         \n# TO RUN THE APP\nif __name__ == \"__main__\":\n     tweet_message()\n```\n\nThe error handler is important to prevent the app from crashing. In many cases, it’s possible for random module to pick a tweet that has already been picked. Because there’s a developer policy on duplicate tweets, the bot would throw a `DuplicateError` sometimes. However, the error handler prevents it from crashing the app. \n\nNow, we can run our bot again, to see if it makes another tweet in 10 minutes. \n\n### Deploying our bot to Heroku\n\nYaay! Our app works great. However, we can’t always run our bot in our terminal. We have to deploy our app to Heroku. If you do not already have an account, visit [Heroku.com](http://heroku.com) to create an account. \n\nLogin to your dashboard and create an app. Once you do so, navigate to “Settings” and Reveal Config Vars\" to add your environment variables. Add the key - value pair from your `.env` file one after the other. \n\n![Screen Shot 2021-08-20 at 12.50.00 PM.png](/image/screen_shot_2021-08-20_at_12.50.00_pm.png \"heroku\")\n\nAfter the config variables are set up, we can go back to our code editor to create the `Procfile` . This is a file that specifies the commands to be executed by the app. In our `Procfile`, we would declare a worker(background task) that keeps running. To set the worker, \n\n```\nworker: python main.py\n```\n\nOn declaring the worker, you want to make sure your app has all its dependencies in the `requirements.txt` file by running the following command in your terminal.\n\n```bash\n$ pip freeze > requirements.txt\n```\n\nNow, we can proceed with deploy our app from the terminal, with [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli). If you do not have package on your local computer, you can [download and install](https://devcenter.heroku.com/articles/heroku-cli). \n\nTo get started with the deployment process, in your terminal, run the command:\n\n```bash\n$ heroku login # TO CONNECT TO YOUR ACCOUNT\n```\n\nInitialize a Git repository\n\n```bash\n$ cd my-project\n$ git init\n```\n\nJust like Git, you have to add a remote repository to your local repo, to connect your heroku app with the local repo. To do this, \n\n```bash\n$ heroku git: remote -a <app name>\n```\n\nTo deploy the app, commit your code to the repo and push to heroku using the Git commands:\n\n```bash\n$ git add . \n$ git commit -am \"commit message\"\n$ git push heroku master \n```\n\nIt is important to take note of your branch name when pushing your code. If you already have a remote repository with a different branch name, in place of `master` , use the branch name. \n\nThe last thing we want to do after deploying our app to Heroku is set up a dyno. To keep our worker running:\n\n```bash\n$ heroku scale worker=1\n```\n\nOnce this is done, your twitter account should have a new tweet. If your app doesn’t create a new tweet, it means the same worker wasn’t scaled properly. To run it manually, you can use the command;\n\n```bash\n$ heroku run worker\n```\n\n…and Viola!!! We’ve built and deployed a twitter bot to make tweets every 10 minutes.\n\n### Conclusion\n\nIn this article, I made use of the [iAffirm API](https://github.com/lulunwenyi/iaffirm) which I built, but you can create a list of messages or quotes as dictionaries in your python app. As previously mentioned, there are tons of available use cases for twitter bots that you can and should definitely try. \n\nYou can find the complete code on GitHub [here](https://github.com/lulunwenyi/iAffirmBot).\n\nI hope you enjoyed reading this tutorial and found it useful. Feel free to drop any questions in the comments, and if you would like to show your support by sponsoring, you can [buymeacoffee](https://buymeacoffee.com/lulunwenyi).",
    "slug": "how-to-build-a-twitter-bot-that-tweets-every-hour-with-python-and-tweepy",
    "tags": "Python, Bot",
    "description": "How to build a Twitter bot that tweets every hour with Python and Tweepy"
  }
]
